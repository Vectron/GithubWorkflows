name: Create github release with installer
on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
        default: ubuntu-latest
        description: "The os to run the runner on"
      dotnet_version:
        required: true
        type: string
        description: "The dotnet version to use"
      solution_file:
        required: true
        type: string
        description: "The full name of the solution file"
      installer_project:
        required: true
        type: string
        description: "The installer project target"
    secrets:
      GITHUB_PAT:
        required: false

env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  OutputPath: ./bin/Installer/
jobs:
  build-and-test:
    if: contains(github.ref, 'refs/tags/')
    runs-on: ${{ inputs.os }}
    permissions:
      deployments: write
      contents: write
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_PAT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}
      - name: Setup Wix 4
        run: dotnet tool install --global wix
      - name: Setup github remotes
        if: env.GITHUB_PAT != ''
        run: >
          dotnet nuget add source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
          --username ${{ github.repository_owner }}
          --password ${{ secrets.GITHUB_PAT }}
          --store-password-in-clear-text
          --name github
      - name: Install dependencies
        run: dotnet restore ${{ inputs.solution_file }}
      - name: Set Windows
        if: runner.os == 'Windows'
        run: |
          chcp 65001 #set code page to utf-8
          echo ("OutputPath=" + ".\bin\Pack\") >> $env:GITHUB_ENV
      - name: Build
        run: >
          dotnet build ${{ inputs.solution_file }}
          --configuration Release
          --no-restore
      - name: Build installer
        run: >
          dotnet build ${{ inputs.installer_project }}
          --configuration Release
          --no-restore
          --output ${{ env.OutputPath }}
      - name: Create release
        env:
          tag: ${{ github.ref_name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ${{ env.OutputPath }}
        run: >
          gh release create "$tag"
          --repo="$GITHUB_REPOSITORY"
          --title="${GITHUB_REPOSITORY#*/} ${tag#v}"
          --generate-notes
      - name: Upload installers
        env:
          tag: ${{ github.ref_name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ${{ env.OutputPath }}
        run: >
          for dir in */
          do
            gh release upload  "$tag" "$dir*msi#${dir%*/}"
            --repo="$GITHUB_REPOSITORY"
          done
        shell: bash
